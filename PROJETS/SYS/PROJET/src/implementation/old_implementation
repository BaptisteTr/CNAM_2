

  if(strstr(input_line, " &") != 0){

    printf("input_line = %s\n",input_line);
    exec_background(input_line); //Appel récursif dans un processus fils
  
  } else {

    if(strstr(input_line, " >") != 0 || strchr(input_line, " >>") != 0){
      exec_redirect(input_line);  //Rediriger la sortie dans l'output correspondand
    } // Coupler avec | ??

    if(strstr(input_line, " | ") != 0){
      exec_pipe(input_line); //Découper les commandes et chainer les input/output
    }

    nb_arg = split_line(input_line, split_char, &splitted_input); 
    splitted_input[nb_arg] = NULL;
    while(i<nb_arg){
      dprintf(STDOUT,"%s\n",splitted_input[i]); //DEBUG 


      // L'idée est de passer par une fonction splittant l'input par caractère de redirection et lançant des appels récursifs 

      // On peut dumper le résultat de part1 dans un buffer et nourrir le reste avec !
      // avoir une fonction récursive lançant des forks éxécutant le reste de la commande aprés le pipe
      // [part1] | [reste]
      // On peut passer aux fonctions les descripteurs pour faire des redirections

      //Construire une pile ??

      // Cas où opérateur

      i++;
    }
    printf("\n");

    simple_exec(intact_input);

    free_if_needed(splitted_input);
    i = 0;

    dprintf(STDOUT, input_line);
